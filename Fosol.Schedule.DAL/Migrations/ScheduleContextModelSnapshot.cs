// <auto-generated />
using System;
using Fosol.Schedule.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fosol.Schedule.DAL.Migrations
{
    [DbContext(typeof(ScheduleContext))]
    partial class ScheduleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fosol.Schedule.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(150);

                    b.Property<Guid>("Key");

                    b.Property<int>("Kind");

                    b.Property<int>("OwnerId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int>("SubscriptionId");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("OwnerId", "State");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Privileges");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("AccountId", "Name")
                        .IsUnique();

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.AccountUser", b =>
                {
                    b.Property<int>("AccountId");

                    b.Property<int>("UserId");

                    b.HasKey("AccountId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountUsers");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("EndOn");

                    b.Property<int>("EventId");

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartOn");

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("EventId", "State", "StartOn", "EndOn", "Name");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ActivityCriteria", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<int>("CriteriaId");

                    b.HasKey("ActivityId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("ActivityCriteria");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ActivityTag", b =>
                {
                    b.Property<int>("ActivityId");

                    b.Property<string>("TagKey");

                    b.Property<string>("TagValue");

                    b.HasKey("ActivityId", "TagKey", "TagValue");

                    b.HasIndex("TagKey", "TagValue");

                    b.ToTable("ActivityTags");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Key", "Value");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Name", "State");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CalendarCriteria", b =>
                {
                    b.Property<int>("CalendarId");

                    b.Property<int>("CriteriaId");

                    b.HasKey("CalendarId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("CalendarCriteria");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CalendarTag", b =>
                {
                    b.Property<int>("CalendarId");

                    b.Property<string>("TagKey");

                    b.Property<string>("TagValue");

                    b.HasKey("CalendarId", "TagKey", "TagValue");

                    b.HasIndex("TagKey", "TagValue");

                    b.ToTable("CalendarTags");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Type");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Name", "Category", "Value");

                    b.ToTable("ContactInfo");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CriteriaObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Criteria")
                        .IsRequired();

                    b.Property<bool>("IsGroup");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Criteria");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("CalendarId");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartOn")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("CalendarId", "State", "StartOn", "EndOn", "Name");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.EventCriteria", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("CriteriaId");

                    b.HasKey("EventId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("EventCriteria");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.EventTag", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<string>("TagKey");

                    b.Property<string>("TagValue");

                    b.HasKey("EventId", "TagKey", "TagValue");

                    b.HasIndex("TagKey", "TagValue");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Opening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("ApplicationProcess");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("Key");

                    b.Property<int>("MaxParticipants");

                    b.Property<int>("MinParticipants");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("OpeningType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("ActivityId", "State", "OpeningType", "ApplicationProcess", "Name");

                    b.ToTable("Openings");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningCriteria", b =>
                {
                    b.Property<int>("OpeningId");

                    b.Property<int>("CriteriaId");

                    b.HasKey("OpeningId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("OpeningCriteria");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningParticipant", b =>
                {
                    b.Property<int>("OpeningId");

                    b.Property<int>("ParticipantId");

                    b.HasKey("OpeningId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OpeningParticipants");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningParticipantApplication", b =>
                {
                    b.Property<int>("OpeningId");

                    b.Property<int>("ParticipantId");

                    b.HasKey("OpeningId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("OpeningParticipantApplications");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningTag", b =>
                {
                    b.Property<int>("OpeningId");

                    b.Property<string>("TagKey");

                    b.Property<string>("TagValue");

                    b.HasKey("OpeningId", "TagKey", "TagValue");

                    b.HasIndex("TagKey", "TagValue");

                    b.ToTable("OpeningTags");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<int>("CalendarId");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("Gender");

                    b.Property<Guid>("Key");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.HasIndex("CalendarId", "DisplayName")
                        .IsUnique();

                    b.HasIndex("Email", "State");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ParticipantAttribute", b =>
                {
                    b.Property<int>("ParticipantId");

                    b.Property<int>("AttributeId");

                    b.Property<int?>("AttributeId1");

                    b.HasKey("ParticipantId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeId1");

                    b.ToTable("ParticipantAttributes");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ParticipantContactInfo", b =>
                {
                    b.Property<int>("ParticipantId");

                    b.Property<int>("ContactInfoId");

                    b.HasKey("ParticipantId", "ContactInfoId");

                    b.HasIndex("ContactInfoId");

                    b.ToTable("ParticipantContactInfo");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndOn")
                        .HasColumnType("DATETIME2");

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartOn")
                        .HasColumnType("DATETIME2");

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Name");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ScheduleEvent", b =>
                {
                    b.Property<int>("ScheduleId");

                    b.Property<int>("EventId");

                    b.HasKey("ScheduleId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ScheduleEvents");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(2000);

                    b.Property<Guid>("Key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Name", "State");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Tag", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Key", "Value");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DefaultAccountId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<Guid>("Key");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("State");

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("Id");

                    b.HasIndex("AddedById");

                    b.HasIndex("DefaultAccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("State");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserAccountRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("AccountRoleId");

                    b.HasKey("UserId", "AccountRoleId");

                    b.HasIndex("AccountRoleId");

                    b.ToTable("UserAccountRoles");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserAttribute", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("AttributeId");

                    b.Property<int?>("AttributeId1");

                    b.HasKey("UserId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeId1");

                    b.ToTable("UserAttributes");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserContactInfo", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("ContactInfoId");

                    b.HasKey("UserId", "ContactInfoId");

                    b.HasIndex("ContactInfoId");

                    b.ToTable("UserContactInfo");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserInfo", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("Birthdate");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.HasKey("UserId");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("LastName", "FirstName", "Gender");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserSetting", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<int>("AddedById");

                    b.Property<DateTime>("AddedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UpdatedById");

                    b.Property<DateTime?>("UpdatedOn");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ValueType")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("UserId", "Key");

                    b.HasIndex("AddedById");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("Key", "Value");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Account", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "Owner")
                        .WithMany("OwnedAccounts")
                        .HasForeignKey("OwnerId");

                    b.HasOne("Fosol.Schedule.Entities.Subscription", "Subscription")
                        .WithMany("Accounts")
                        .HasForeignKey("SubscriptionId");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.Address", "BusinessAddress", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .HasColumnName("BusinessAddress1")
                                .HasMaxLength(150);

                            b1.Property<string>("Address2")
                                .HasColumnName("BusinessAddress2")
                                .HasMaxLength(150);

                            b1.Property<string>("City")
                                .HasColumnName("BusinessCity")
                                .HasMaxLength(150);

                            b1.Property<string>("Country")
                                .HasColumnName("BusinessCountry")
                                .HasMaxLength(100);

                            b1.Property<string>("Name")
                                .HasColumnName("BusinessName")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("BusinessPostalCode")
                                .HasMaxLength(20);

                            b1.Property<string>("Province")
                                .HasColumnName("BusinessProvince")
                                .HasMaxLength(150);

                            b1.ToTable("Accounts");

                            b1.HasOne("Fosol.Schedule.Entities.Account")
                                .WithOne("BusinessAddress")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.Address", "AccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "BusinessPhone", b1 =>
                        {
                            b1.Property<int?>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("BusinessPhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("BusinessPhone")
                                .HasMaxLength(25);

                            b1.ToTable("Accounts");

                            b1.HasOne("Fosol.Schedule.Entities.Account")
                                .WithOne("BusinessPhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "AccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "FaxNumber", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("FaxName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("FaxNumber")
                                .HasMaxLength(25);

                            b1.ToTable("Accounts");

                            b1.HasOne("Fosol.Schedule.Entities.Account")
                                .WithOne("FaxNumber")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "AccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "TollFreeNumber", b1 =>
                        {
                            b1.Property<int>("AccountId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("TollFreeName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("TollFreeNumber")
                                .HasMaxLength(25);

                            b1.ToTable("Accounts");

                            b1.HasOne("Fosol.Schedule.Entities.Account")
                                .WithOne("TollFreeNumber")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "AccountId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.AccountRole", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Account", "Account")
                        .WithMany("Roles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.AccountUser", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Activity", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.Event", "Event")
                        .WithMany("Activities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ActivityCriteria", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Activity", "Activity")
                        .WithMany("Criteria")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.CriteriaObject", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ActivityTag", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Activity", "Activity")
                        .WithMany("Tags")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Tag", "Tag")
                        .WithMany("Activities")
                        .HasForeignKey("TagKey", "TagValue")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Attribute", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Calendar", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Account", "Account")
                        .WithMany("Calendars")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CalendarCriteria", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Calendar", "Calendar")
                        .WithMany("Criteria")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.CriteriaObject", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CalendarTag", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Calendar", "Calendar")
                        .WithMany("Tags")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Tag", "Tag")
                        .WithMany("Calendars")
                        .HasForeignKey("TagKey", "TagValue")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ContactInfo", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.CriteriaObject", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Event", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.Calendar", "Calendar")
                        .WithMany("Events")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.EventCriteria", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.CriteriaObject", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Event", "Event")
                        .WithMany("Criteria")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.EventTag", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Event", "Event")
                        .WithMany("Tags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Tag", "Tag")
                        .WithMany("Events")
                        .HasForeignKey("TagKey", "TagValue")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Opening", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Activity", "Activity")
                        .WithMany("Openings")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningCriteria", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.CriteriaObject", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Opening", "Opening")
                        .WithMany("Criteria")
                        .HasForeignKey("OpeningId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningParticipant", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Opening", "Opening")
                        .WithMany("Participants")
                        .HasForeignKey("OpeningId");

                    b.HasOne("Fosol.Schedule.Entities.Participant", "Participant")
                        .WithMany("Openings")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningParticipantApplication", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Opening", "Opening")
                        .WithMany("Applications")
                        .HasForeignKey("OpeningId");

                    b.HasOne("Fosol.Schedule.Entities.Participant", "Participant")
                        .WithMany("Applications")
                        .HasForeignKey("ParticipantId");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.OpeningTag", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Opening", "Opening")
                        .WithMany("Tags")
                        .HasForeignKey("OpeningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Tag", "Tag")
                        .WithMany("Openings")
                        .HasForeignKey("TagKey", "TagValue")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Participant", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.Calendar", "Calendar")
                        .WithMany("Participants")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("Participants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .HasColumnName("HomeAddress1")
                                .HasMaxLength(150);

                            b1.Property<string>("Address2")
                                .HasColumnName("HomeAddress2")
                                .HasMaxLength(150);

                            b1.Property<string>("City")
                                .HasColumnName("HomeCity")
                                .HasMaxLength(150);

                            b1.Property<string>("Country")
                                .HasColumnName("HomeCountry")
                                .HasMaxLength(100);

                            b1.Property<string>("Name")
                                .HasColumnName("HomeName")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("HomePostalCode")
                                .HasMaxLength(20);

                            b1.Property<string>("Province")
                                .HasColumnName("HomeProvince")
                                .HasMaxLength(150);

                            b1.ToTable("Participants");

                            b1.HasOne("Fosol.Schedule.Entities.Participant")
                                .WithOne("HomeAddress")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.Address", "ParticipantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.Address", "WorkAddress", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1")
                                .HasColumnName("WorkAddress1")
                                .HasMaxLength(150);

                            b1.Property<string>("Address2")
                                .HasColumnName("WorkAddress2")
                                .HasMaxLength(150);

                            b1.Property<string>("City")
                                .HasColumnName("WorkCity")
                                .HasMaxLength(150);

                            b1.Property<string>("Country")
                                .HasColumnName("WorkCountry")
                                .HasMaxLength(100);

                            b1.Property<string>("Name")
                                .HasColumnName("WorkName")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("WorkPostalCode")
                                .HasMaxLength(20);

                            b1.Property<string>("Province")
                                .HasColumnName("WorkProvince")
                                .HasMaxLength(150);

                            b1.ToTable("Participants");

                            b1.HasOne("Fosol.Schedule.Entities.Participant")
                                .WithOne("WorkAddress")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.Address", "ParticipantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "HomePhone", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("HomePhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("HomePhone")
                                .HasMaxLength(25);

                            b1.ToTable("Participants");

                            b1.HasOne("Fosol.Schedule.Entities.Participant")
                                .WithOne("HomePhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "ParticipantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "MobilePhone", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("MobilePhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("MobilePhone")
                                .HasMaxLength(25);

                            b1.ToTable("Participants");

                            b1.HasOne("Fosol.Schedule.Entities.Participant")
                                .WithOne("MobilePhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "ParticipantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "WorkPhone", b1 =>
                        {
                            b1.Property<int>("ParticipantId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Name")
                                .HasColumnName("WorkPhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("WorkPhone")
                                .HasMaxLength(25);

                            b1.ToTable("Participants");

                            b1.HasOne("Fosol.Schedule.Entities.Participant")
                                .WithOne("WorkPhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "ParticipantId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ParticipantAttribute", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Attribute")
                        .WithMany("Participants")
                        .HasForeignKey("AttributeId1");

                    b.HasOne("Fosol.Schedule.Entities.Participant", "Participant")
                        .WithMany("Attributes")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ParticipantContactInfo", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.ContactInfo", "ContactInfo")
                        .WithMany("Participants")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Participant", "Participant")
                        .WithMany("ContactInfo")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Schedule", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.ScheduleEvent", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Schedule", "Schedule")
                        .WithMany("Events")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Subscription", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.Tag", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.User", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.Account", "DefaultAccount")
                        .WithMany()
                        .HasForeignKey("DefaultAccountId");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserAccountRole", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.AccountRole", "AccountRole")
                        .WithMany("Users")
                        .HasForeignKey("AccountRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserAttribute", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.Attribute")
                        .WithMany("Users")
                        .HasForeignKey("AttributeId1");

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("Attributes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserContactInfo", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.ContactInfo", "ContactInfo")
                        .WithMany("Users")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("ContactInformation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserInfo", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithOne("Info")
                        .HasForeignKey("Fosol.Schedule.Entities.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<int?>("UserInfoTempId");

                            b1.Property<string>("Address1")
                                .HasColumnName("HomeAddress1")
                                .HasMaxLength(150);

                            b1.Property<string>("Address2")
                                .HasColumnName("HomeAddress2")
                                .HasMaxLength(150);

                            b1.Property<string>("City")
                                .HasColumnName("HomeCity")
                                .HasMaxLength(150);

                            b1.Property<string>("Country")
                                .HasColumnName("HomeCountry")
                                .HasMaxLength(100);

                            b1.Property<string>("Name")
                                .HasColumnName("HomeName")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("HomePostalCode")
                                .HasMaxLength(20);

                            b1.Property<string>("Province")
                                .HasColumnName("HomeProvince")
                                .HasMaxLength(150);

                            b1.ToTable("UserInfo");

                            b1.HasOne("Fosol.Schedule.Entities.UserInfo")
                                .WithOne("HomeAddress")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.Address", "UserInfoTempId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.Address", "WorkAddress", b1 =>
                        {
                            b1.Property<int?>("UserInfoTempId3");

                            b1.Property<string>("Address1")
                                .HasColumnName("WorkAddress1")
                                .HasMaxLength(150);

                            b1.Property<string>("Address2")
                                .HasColumnName("WorkAddress2")
                                .HasMaxLength(150);

                            b1.Property<string>("City")
                                .HasColumnName("WorkCity")
                                .HasMaxLength(150);

                            b1.Property<string>("Country")
                                .HasColumnName("WorkCountry")
                                .HasMaxLength(100);

                            b1.Property<string>("Name")
                                .HasColumnName("WorkName")
                                .HasMaxLength(100);

                            b1.Property<string>("PostalCode")
                                .HasColumnName("WorkPostalCode")
                                .HasMaxLength(20);

                            b1.Property<string>("Province")
                                .HasColumnName("WorkProvince")
                                .HasMaxLength(150);

                            b1.ToTable("UserInfo");

                            b1.HasOne("Fosol.Schedule.Entities.UserInfo")
                                .WithOne("WorkAddress")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.Address", "UserInfoTempId3")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "HomePhone", b1 =>
                        {
                            b1.Property<int?>("UserInfoTempId1");

                            b1.Property<string>("Name")
                                .HasColumnName("HomePhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("HomePhone")
                                .HasMaxLength(25);

                            b1.ToTable("UserInfo");

                            b1.HasOne("Fosol.Schedule.Entities.UserInfo")
                                .WithOne("HomePhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "UserInfoTempId1")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "MobilePhone", b1 =>
                        {
                            b1.Property<int?>("UserInfoTempId2");

                            b1.Property<string>("Name")
                                .HasColumnName("MobilePhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("MobilePhone")
                                .HasMaxLength(25);

                            b1.ToTable("UserInfo");

                            b1.HasOne("Fosol.Schedule.Entities.UserInfo")
                                .WithOne("MobilePhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "UserInfoTempId2")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "WorkPhone", b1 =>
                        {
                            b1.Property<int?>("UserInfoTempId4");

                            b1.Property<string>("Name")
                                .HasColumnName("WorkPhoneName")
                                .HasMaxLength(50);

                            b1.Property<string>("Number")
                                .HasColumnName("WorkPhone")
                                .HasMaxLength(25);

                            b1.ToTable("UserInfo");

                            b1.HasOne("Fosol.Schedule.Entities.UserInfo")
                                .WithOne("WorkPhone")
                                .HasForeignKey("Fosol.Schedule.Entities.ValueObjects.PhoneNumber", "UserInfoTempId4")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Fosol.Schedule.Entities.UserSetting", b =>
                {
                    b.HasOne("Fosol.Schedule.Entities.User", "AddedBy")
                        .WithMany()
                        .HasForeignKey("AddedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.HasOne("Fosol.Schedule.Entities.User", "User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
